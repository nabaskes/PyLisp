(define map ((f l) (cond
		    (atom? l)
		    ((eval f l)
		     (cons
		      (eval f (car l))
		      (map f (cdr l)))
		     )
		    )
	     )
  )

(define reduce ((f l) (cond
		       (atom? l)
		       ((quote l)
			(eval f
			      ((car l) (reduce f (cdr l)))))))


(define filter ((k l)
		(cond
		 (eval k l) ((cons (car l)
				   (filter k (cdr l)))
			     (filter k (cdr l)))
		 )
		)
  )

(define qsort ((k l) (cons
		      (qsort
		       k
		       (filter (lambda q (k (car l) q)) l))
		      (cons (car l)
			    (qsort
			     k
			     (filter (lambda q (not (k (car l) q))) l)
			     )
			    )
		      )
	       )
  )
